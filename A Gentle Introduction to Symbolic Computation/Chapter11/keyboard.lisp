(defun complement-base (base)
	(cond ((equal base 'A) 'T)
		  ((equal base 'G) 'C)
		  ((equal base 'T) 'A)
		  ((equal base 'C) 'G)))

(defun complement-strand (strand)
	(let ((result nil))
		(dolist (element strand (reverse result))
			(push (complement-base element) result))))

(defun make-double (strand)
	(let ((result nil))
		(dolist (element strand (reverse result))
			(push (list element (complement-base element)) result))))

(defun flatten (ls)
	(let ((result nil))
		(dolist (element ls (reverse result))
			(if (listp element) 
					(dolist (inner element)
						(push inner result))
				(push element result))))) 

(defun count-bases (strand)
	(do* ((num-a 0 (if (equal e2 'a) (incf num-a) num-a))
		  (num-t 0 (if (equal e2 't) (incf num-t) num-t))
		  (num-g 0 (if (equal e2 'g) (incf num-g) num-g))
		  (num-c 0 (if (equal e2 'c) (incf num-c) num-c))
		  (e1 (flatten strand) (rest e1))
		  (e2 (first e1) (first e1)))
	 	 ((null e1)
			(list (list 'a num-a) 
			  	  (list 't num-t)
			  	  (list 'g num-g)
			  	  (list 'c num-c)))))

(defun prefixp (st1 st2)
	(let ((result nil)
		  (n (length st1)))
		(dolist (element st2 (equal (reverse result) st1))
				(unless (zerop n)
					(setf n (decf n))
					(push element result)))))

(defun appearsp (st1 st2)
	(do ((y st2 (rest y)))
		((null y) nil)
	  (if (equal (prefixp st1 y) t) 
	  	(return t))))

(defun coverp (st1 st2)
	(do ((y st2 (nthcdr (length st1) y)))
		((null y) t)
		(if (not (prefixp st1 y)) (return nil))))

(defun prefix (n strand)
	(let ((result nil))
		(dolist (element strand (reverse result))
			(unless (zerop n)
				(decf n)
				(push element result)))))

(defun kernel (strand)
	(do ((x (prefix 1 strand) (prefix n strand))
		  (n 1 (+ n 1)))
		((null x) strand)
		(if (coverp x strand) (return x))))

(defun draw-dna (strand)
	(dotimes (i (length strand))
		(format t "- "))
	(format t "~&")

	(dotimes (i (length strand))
		(format t "! "))
	(format t "~&")

	(dolist (element strand)
		(format t "~S " element))
	(format t "~&")

	(dotimes (i (length strand))
		(format t ". "))
	(format t "~&")

	(dotimes (i (length strand))
		(format t ". "))
	(format t "~&")

	(dolist (element (complement-strand strand))
		(format t "~S " element))
	(format t "~&")

	(dotimes (i (length strand))
		(format t "! "))
	(format t "~&")

	(dotimes (i (length strand))
		(format t "- "))
	(format t "~&"))
